generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  isAdmin   Boolean  @default(false)
  password  String
  slug      String   @unique
  createdAt DateTime @default(now())

  // Relations
  reviews       Review[]
  WatchListItem WatchListItem[]
  Reply         Reply[]

  followers   Follow[]      @relation("followers")
  following   Follow[]      @relation("following")
  MatchRating MatchRating[]
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Event {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  date          DateTime
  promotion     String
  posterUrl     String?
  description   String?
  type          String?
  tmdbId        Int?
  profightdbUrl String?
  createdAt     DateTime        @default(now())
  matches       Match[]
  reviews       Review[]
  WatchListItem WatchListItem[]
}

model Match {
  id           String             @id @default(cuid())
  title        String
  result       String?
  rating       Float?
  duration     Int?
  type         String?
  eventId      String
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participants MatchParticipant[]
  ratings      MatchRating[]
  createdAt    DateTime           @default(now())
}

model MatchRating {
  id      String @id @default(cuid())
  rating  Int
  userId  String
  matchId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  Reply     Reply[]
}

model WatchListItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Reply {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Wrestler {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  imageUrl  String?
  bio       String?
  matches   MatchParticipant[]
  createdAt DateTime           @default(now())
}

model MatchParticipant {
  id         String   @id @default(cuid())
  matchId    String
  match      Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  wrestlerId String
  wrestler   Wrestler @relation(fields: [wrestlerId], references: [id], onDelete: Cascade)
  team       Int?
  isWinner   Boolean?
}
